#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

vector<int> twoSum(vector<int>& nums, int target) {
    unordered_map<int, int> numMap;  // Map to store the number and its index
    for (int i = 0; i < nums.size(); i++) {
        int complement = target - nums[i];  // The number needed to reach the target
        if (numMap.find(complement) != numMap.end()) {
            // If the complement exists in the map, return its index and the current index
            return {numMap[complement], i};
        }
        numMap[nums[i]] = i;  // Store the current number and its index in the map
    }
    return {};  // In case there's no solution, though the problem guarantees one solution.
}

int main() {
    vector<int> nums = {2, 7, 11, 15};
    int target = 9;
    vector<int> result = twoSum(nums, target);
    cout << "Output: [" << result[0] << ", " << result[1] << "]" << endl;
    return 0;
}
